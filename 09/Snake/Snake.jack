// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/** Implements a graphical square. */
class Snake {

   field int x, y; 
   field Array array;
   field int size, movement; 

   /** Constructs a new square with a given location and size. */
   constructor Snake new(int Ax, int Ay, int Asize) {
      let x = Ax;
      let y = Ay;
      let size = Asize;
      let movement = size + 1;
      do draw();
      return this;
   }

   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method void setXY(int Ax, int Ay) { //For individual body segments
      do erase();
      let x = Ax;
      let y = Ay;
      do draw();
      return;
   }

   method int getX() { //For the head 
      return x;
   }

   method int getY() { //For the head
      return y;
   }

   /** Draws the square on the screen. */
   method void draw() {
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   /** Erases the square from the screen. */
   method void erase() {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size); //Problematic line
      return;
   }

   /** Moves the square up by 16 pixels. */
   method void moveUp() {
      if (y > 1) {
         do erase();
         let y = y - movement;
         do draw();
      }
      return;
   }

   /** Moves the square down by 16 pixels. */
   method void moveDown() {
      if ((y + size) < 255) {
         do erase();
         let y = y + movement;
         do draw();
      }
      return;
   }

   /** Moves the square left by 16 pixels. */
   method void moveLeft() {
      if (x > 1) {
         do erase();
         let x = x - movement;
         do draw();
      }
      return;
   }

   /** Moves the square right by 16 pixels. */
   method void moveRight() {
      if ((x + size) < 511) {
         do erase();
         let x = x + movement;
         do draw();
      }
      return;
   }
}
