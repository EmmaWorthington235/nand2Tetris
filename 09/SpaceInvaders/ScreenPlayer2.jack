class ScreenPlayer2 {
	field Array aliens;
	field int cycle;
	field int cCycle;
	field int fRow;
	field int fCol;

	constructor ScreenPlayer2 new () {

		//aliens[6] stores the row of the last alien in each column
		let aliens = Array.new(6);
		let aliens[0]=3;
		let aliens[1]=3;
		let aliens[2]=3;
		let aliens[3]=3;
		let aliens[4]=3;
		let aliens[5]=3;

		let cycle = 0;
		let cCycle = 0;
		return this;
	}

	method void cycleCounter () {	//this is essentially the internal clock of the screenplayer for determining when the aliens will move
		let cCycle = cCycle + 1;
		if (cCycle = 8) {
			let cCycle = 0;
			let cycle = cycle + 1;
			if (cycle = 8) {
				let cycle = 0;
			}
		}
		return;
	}



	method void print () {

	do template(false);	//first clear

	do cycleCounter();

	//determines alien location dependent upon which cycle
	if (cycle = 0) {
		let fRow = 4;
		let fCol = 6;
	}
	if (cycle = 1) {
		let fRow = 4;
		let fCol = 11;
	}
	if (cycle = 2) {
		let fRow = 4;
		let fCol = 16;
	}
	if (cycle = 3) {
		let fRow = 8;
		let fCol = 16;
	}
	if (cycle = 4) {
		let fRow = 12;
		let fCol = 16;
	}
	if (cycle = 5) {
		let fRow = 12;
		let fCol = 11;
	}
	if (cycle = 6) {
		let fRow = 12;
		let fCol = 6;
	}
	if (cycle = 7) {
		let fRow = 8;
		let fCol = 6;
	}
	
	do template(true);
	return;

	}

	method void template (boolean print) {	//this is the template that prints out all the aliens (essentially print)

		var int row;
		var int column;
		
		var int cIndex;
		var int rIndex;


		let row = 0;
		let column = fCol;

		let cIndex = 0;
		let rIndex = 0;


		while (cIndex < 6) {
			let rIndex = 0;
			let row = fRow;
			while (rIndex < aliens[cIndex]) {
				//Printing the aliens
				if (print) {
					do Screen.setColor(true);
				}
				else {
					do Screen.setColor(false);
				}

				do Screen.drawPixel(column+3,row+3);
				do Screen.drawPixel(column+12,row+3);
				do Screen.drawPixel(column+4,row+4);
				do Screen.drawPixel(column+11,row+4);

				do Screen.drawRectangle(column+5,row+5,column+10,row+5);
				do Screen.drawRectangle(column+4,row+6,column+11,row+6);
				do Screen.drawRectangle(column+3,row+7,column+12,row+7);
				//need to put in eyes
				do Screen.drawRectangle(column+2,row+8,column+13,row+11);
				//need to take out middle part
				do Screen.drawPixel(column+2,row+12);
				do Screen.drawPixel(column+13,row+12);
				do Screen.drawPixel(column+4,row+12);
				do Screen.drawPixel(column+11,row+12);
				do Screen.drawPixel(column+2,row+13);
				do Screen.drawPixel(column+13,row+13);
				do Screen.drawPixel(column+5,row+13);
				do Screen.drawPixel(column+6,row+13);
				do Screen.drawPixel(column+10,row+13);
				do Screen.drawPixel(column+9,row+13);
				
				do Screen.setColor(false);
				do Screen.drawPixel(column+5,row+7);
				do Screen.drawPixel(column+10,row+7);
				do Screen.drawRectangle(column+6,row+11,column+9,row+11);
				

				let row = row + 32;
				let rIndex = rIndex + 1;

			}
			
			let column = column + 96;
			let cIndex = cIndex + 1;
			
			
		}

	return;
	}


	method void alienHit (int column, int row) {
		var int cIndex;
		var int rIndex;
		let cIndex = 7 + Math.multiply(column,96);
		let rIndex = 7 + Math.multiply(row,32);


		do Screen.setColor(false);
		do Screen.drawRectangle(cIndex,rIndex,cIndex+20,rIndex+20);
		return;
	}

	method boolean possibleHit () {
		if (fCol = 16) {
			return false;
		}
		else {
			return true;
		}
	}

	method int getRow (int col) {
		return aliens[col];
	}

	method void setRow (int col) {
		let aliens[col] = aliens[col] - 1;
		return;
	}

	method void dispose () {
		do Memory.deAlloc(this);
		return;
	}

}