CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        Mux16(a=x, b=false, sel=zx, out=zerox);
        Not16(in=zerox, out=notx);
        Mux16(a=zerox, b=notx, sel=nx, out=negx);

        Mux16(a=y, b=false, sel=zy, out=zeroy);
        Not16(in=zeroy, out=noty);
        Mux16(a=zeroy, b=noty, sel=ny, out=negy);

        And16(a=negx, b=negy, out=andxy);
        Add16(a=negx, b=negy, out=addxy);

        Mux16(a=andxy, b=addxy, sel=f, out=fout);
        Not16(in=fout, out=notno);
        Mux16(a=fout, b=notno, sel=no, out=out, out[0..7]=lo, out[8..15]=hi, out[15]=ng);

        Or8Way(in=lo, out=lowbits);
        Or8Way(in=hi, out=highbits);
        Or(a=lowbits, b=highbits, out=notzr);
        Not(in=notzr, out=zr);
    }